services:
  db:
    image: postgres:15
    restart: always
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata      
    env_file:
      - .env    
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}    

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8081:80"
    depends_on:
      - db 

  backend:
    image: brunoamedeiros/a3data-challenge:latest
    restart: always
    networks:      
      - default
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER?Variable not set}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD?Variable not set}
      - USERS_OPEN_REGISTRATION=${USERS_OPEN_REGISTRATION}
      - POSTGRES_SERVER=${POSTGRES_SERVER}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}      
    build:
      context: .
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    ports:
      - "8000:80"        
    platform: linux/amd64 # Patch for M1 Mac

# setup:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es01\n"\
  #         "    dns:\n"\
  #         "      - es01\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: kibana\n"\
  #         "    dns:\n"\
  #         "      - kibana\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions";
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120

  # es01:
  #   depends_on:
  #     setup:
  #       condition: service_healthy
  #   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
  #   labels:
  #     co.elastic.logs/module: elasticsearch
  #   volumes:
  #     - certs:/usr/share/elasticsearch/config/certs
  #     - esdata01:/usr/share/elasticsearch/data
  #   ports:
  #     - ${ELASTICSEARCH_PORT}:9200
  #   environment:
  #     - node.name=es01
  #     - cluster.name=${CLUSTER_NAME}
  #     - discovery.type=single-node
  #     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
  #     - bootstrap.memory_lock=true
  #     - xpack.security.enabled=true
  #     - xpack.security.http.ssl.enabled=true
  #     - xpack.security.http.ssl.key=certs/es01/es01.key
  #     - xpack.security.http.ssl.certificate=certs/es01/es01.crt
  #     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.enabled=true
  #     - xpack.security.transport.ssl.key=certs/es01/es01.key
  #     - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
  #     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
  #     - xpack.security.transport.ssl.verification_mode=certificate
  #     - xpack.license.self_generated.type=${LICENSE}
  #   mem_limit: ${ES_MEM_LIMIT}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   healthcheck:
  #     test:
  #       [
  #         "CMD-SHELL",
  #         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
  #       ]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 120

  # kibana:
  #  depends_on:
  #    es01:
  #      condition: service_healthy
  #  image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
  #  labels:
  #    co.elastic.logs/module: kibana
  #  volumes:
  #    - certs:/usr/share/kibana/config/certs
  #    - kibanadata:/usr/share/kibana/data
  #  ports:
  #    - ${KIBANA_PORT}:5601
  #  environment:
  #    - SERVERNAME=kibana
  #    - ELASTICSEARCH_HOSTS=https://es01:9200
  #    - ELASTICSEARCH_USERNAME=kibana_system
  #    - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
  #    - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
  #    - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #    - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #    - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
  #  mem_limit: ${KB_MEM_LIMIT}
  #  healthcheck:
  #    test:
  #      [
  #        "CMD-SHELL",
  #        "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
  #      ]
  #    interval: 10s
  #    timeout: 10s
  #    retries: 120        

volumes:
  app-db-data:
  # certs:
  #   driver: local
  # esdata01:
  #   driver: local
  # kibanadata:
  #   driver: local  
